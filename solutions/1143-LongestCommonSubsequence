class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        ### Approach 1:
        # # Time Complexity: O(n * m)
        # # Space Complexity: O(n * m)
        # dp = [[0 for j in range(len(text2) + 1)] for i in range(len(text1) + 1)]

        # for i in range(len(text1) - 1, -1, -1):
        #     for j in range(len(text2) - 1, -1, -1):
        #         if text1[i] == text2[j]:
        #             dp[i][j] = 1 + dp[i + 1][j + 1]
        #         else:
        #             dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])

        # return dp[0][0]

        ### Approach 2:
        # Get the lengths of the input strings
        m, n = len(text1), len(text2)
        
        # Step 1: Create a DP table with (m + 1) rows and (n + 1) columns, initialized to 0
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        # Step 2: Fill the DP table
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    # Characters match, add 1 to the result from previous diagonal cell
                    dp[i][j] = 1 + dp[i - 1][j - 1]
                else:
                    # Characters do not match, take the maximum from top or left
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

        # Step 3: The length of the LCS is in the cell dp[m][n]
        return dp[m][n]