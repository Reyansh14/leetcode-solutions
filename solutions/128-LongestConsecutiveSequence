# Notes: 
# 
# Time  Complexity: O(n)
# Space Complexity: O(n)

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        num_set = set(nums)
        longest = 0

        for n in nums:
            # check if it's the start of a sequence
            if (n - 1) not in num_set:
                length = 0
                while (n + length) in num_set:
                    length += 1
                longest = max(length, longest)

        return longest

        # ORIGINAL APPROACH:
        # my_dict = {}
        # longest = 0
        # for num in nums:
        #     my_dict[num] = 0
        #     my_dict[num - 1] = 0
        #     my_dict[num + 1] = 0

        # for num in nums:
        #     if my_dict[num] > 0:
        #         continue
        #     seq_length = my_dict[num - 1] + my_dict[num + 1] + 1
        #     if seq_length > longest:
        #         longest = seq_length
        #     my_dict[num] = seq_length
        #     l_ptr = num - 1
        #     r_ptr = num + 1
        #     # print(f'num: {num}, my_dict: {my_dict}, case: 1, l_ptr: {l_ptr}, r_ptr: {r_ptr}')
        #     while my_dict[l_ptr] > 0:
        #         my_dict[l_ptr] = seq_length
        #         l_ptr -= 1
        #     while my_dict[r_ptr] > 0:
        #         my_dict[r_ptr] = seq_length
        #         r_ptr += 1
        # # print(my_dict)
        # return longest